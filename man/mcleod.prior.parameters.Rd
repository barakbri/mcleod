% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcleod_main_function.R
\name{mcleod.prior.parameters}
\alias{mcleod.prior.parameters}
\title{Generates an object of type 'mcleod.prior.def.obj' defining the prior for the random effect in the functions \code{mcleod}, \code{mcleod.estimate.CI}, \code{mcleod.estimate.CI.single.q} and \code{mcleod.estimate.CI.single.theta}}
\usage{
mcleod.prior.parameters(
  prior.type = MCLEOD.PRIOR.TYPE.BETA.HEIRARCHICAL,
  Beta.Heirarchical.Levels = 6,
  Two.Layer.Dirichlet.Intervals = 64,
  Two.Layer.Dirichlet.Nodes.in.First.Layer = 8,
  Prior_Hyper_Parameters_BetaH_L = NULL,
  Prior_Hyper_Parameters_BetaH_U = NULL,
  Prior_Hyper_Parameters_2LDT = NULL
)
}
\arguments{
\item{prior.type}{The type of prior used. Values are either \code{MCLEOD.PRIOR.TYPE.BETA.HEIRARCHICAL} or \code{MCLEOD.PRIOR.TYPE.TWO.LAYER.DIRICHLET}}

\item{Beta.Heirarchical.Levels}{The number of levels used (for prior of type MCLEOD.PRIOR.TYPE.BETA.HEIRARCHICAL). The first level (root of the tree) is 1. A full tree with L=4 levels has 2^(4-1) segments for the prior.}

\item{Two.Layer.Dirichlet.Intervals}{When using \code{MCLEOD.PRIOR.TYPE.TWO.LAYER.DIRICHLET} as the prior - the total number of leafs in the two-layer dirichet tree.}

\item{Two.Layer.Dirichlet.Nodes.in.First.Layer}{Number of nodes in the first level of the Dirichlet tree. \code{Two.Layer.Dirichlet.Intervals} must be an integer multiple of \code{Two.Layer.Dirichlet.Nodes.in.First.Layer}}

\item{Prior_Hyper_Parameters_BetaH_L}{A matrix of size (L, (2^(L-1))). Each row represents a level in the tree. Values in the lth row of the matrix, in entries 1 to 2^(l-1), correspond to the alpha_1 parameters of beta random variables, in the lth level of the polya tree.}

\item{Prior_Hyper_Parameters_BetaH_U}{matrix of size (L, (2^(L-1))). Each row represents a level in the tree. Values in the lth row of the matrix, in entries 1 to 2^(l-1), correspond to the alpha_2 parameters of beta random variables, in the lth level of the polya tree.}

\item{Prior_Hyper_Parameters_2LDT}{a matrix with dimensions (2,Two.Layer.Dirichlet.Intervals). The leftmost \code{Two.Layer.Dirichlet.Intervals} entries in the first row give the intensity parameters for the Dirichlet variable at the root of the tree. The values for the second row give the intensity parameters for the dirichlet random variables at the middle level: each \code{Two.Layer.Dirichlet.Intervals / Two.Layer.Dirichlet.Nodes.in.First.Layer} define the intensity parameters of a single Dirichlet random variable, from the leftmost to rightmost variables. See example on how to use in the package vignette.}
}
\value{
An object of type \code{mcleod.prior.def.obj}
}
\description{
Details the type of prior for mixing distribution. For a \code{\link{mcleod}} model with covariates, this function is used to define the distribution of the random intercept term. The prior for the distribution of random effects can be either Hierarchical Beta (a Polya Tree, i.e. a full binary tree with L levels, with each leaf corresponding to a segment on the real line, and each internal node associated with a beta random variable) or a two level dirichlet tree. See additional details in the package vignette.
}
\details{
For a prior of type \code{MCLEOD.PRIOR.TYPE.BETA.HEIRARCHICAL}, the Polya tree defines a piecewise constant prior with 2^(Beta.Heirarchical.Levels) segments on the real line. For priors defined using \code{MCLEOD.PRIOR.TYPE.TWO.LAYER.DIRICHLET}, the number of segments on the real line is defined using \code{Two.Layer.Dirichlet.Intervals}, and the number of nodes in the upper later of the dirichlet tree is defined by \code{Two.Layer.Dirichlet.Nodes.in.First.Layer}. .The support for the prior is given by the parameter \code{a.limits} in the function \code{\link{mcleod}}, with "jumps" in the piecewise constant density function equally placed equally across the support defined by \code{a.limits}.

All intensity hyperparameters for either Beta variables (in the Polya tree), or gamma variables (in the 2-level Dirichlet tree) have a value of 1 by default. This can be changed using the parameters \code{Prior_Hyper_Parameters_BetaH_L}, \code{Prior_Hyper_Parameters_BetaH_U} and \code{Prior_Hyper_Parameters_2LDT}, see example in the package vignette.
}
\examples{
 # For full description of package model and workflow,
 # including this function, Type browseVignettes(package = 'mcleod') 
 # in the R console and check the package vignette

#generate data
library(mcleod)
N = 30
K = 300
set.seed(1)
u = sample(c(0,1),size = K,replace = T)
x = rbinom(K,size = N,prob =inv.log.odds(rnorm(K,-1+3*u,sd = 0.3)))
n = rep(N,K)

###################################
# Example 1 -  how to change the number of levels for the Polya tree prior
###################################
prior_obj  = mcleod.prior.parameters( #construct object defining the prior
  prior.type =MCLEOD.PRIOR.TYPE.BETA.HEIRARCHICAL, #type of prior
  Beta.Heirarchical.Levels = 6
)

res = mcleod(x, n, prior_parameters = prior_obj) #pass object to main function as argument

###################################
# Example 2 -  how to change the prior to a 2-level Dirichlet tree
###################################
prior_obj  = mcleod.prior.parameters(
  prior.type =MCLEOD.PRIOR.TYPE.TWO.LAYER.DIRICHLET, # define a 2-layer Dirichlet tree
  Two.Layer.Dirichlet.Intervals = 64, #number of segments
  # Note: Two.Layer.Dirichlet.Intervals must
  # be an integer multiple of 
  #Two.Layer.Dirichlet.Nodes.in.First.Layer
  Two.Layer.Dirichlet.Nodes.in.First.Layer = 8
)

res = mcleod(x, n, prior_parameters = prior_obj) #pass as argument


#\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%
# Example 3 (Advanced)  - How to change 
# hyper-parameters for the Polya tree prior
#\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%\%
#For, example, how to change all hyper parameters to 2
# We form two matrices, for $\alpha^{L}$ and $\alpha^{U}$.
# In each matrix, the [l,i] entry gives the appropriate hyper parameter
# for the ith node on the lth level.

L = 5 # number of levels
alpha_L = matrix(NA,nrow = L,ncol = 2^(L-1)) # hyper-parameter matrices 
alpha_U = matrix(NA,nrow = L,ncol = 2^(L-1))

# Fill all entries to a value of 2
for(l in 1:L){
   for(k in 1:2^(l-1)){
      alpha_L[l,k] = 2
      alpha_U[l,k] = 2
   }
}

# we pass the hyper-paramers to the mcleod.prior.parameters(...) function
mcleod_res = mcleod(x,n,
           a.limits = c(-4,4),
           
           #pass prior hyper parameters
           prior_param = mcleod.prior.parameters(
                  prior.type = MCLEOD.PRIOR.TYPE.BETA.HEIRARCHICAL,
                  Beta.Heirarchical.Levels = L,
                  #NOTE: THESE ARE THE MATRICES FOR THE HYPER-PARAMETERS:
                  Prior_Hyper_Parameters_BetaH_L = alpha_L,
                  Prior_Hyper_Parameters_BetaH_U = alpha_U),
                  
           # set the number of iterations
           computational_parameters = mcleod.computational.parameters(
                  nr.gibbs = 2000,
                  nr.gibbs.burnin = 1000)
         )

mcleod::plot.posterior(mcleod_res)

###################
# Example 4 (Advanced)  - How to change hyper-parameters
# for the Two-Level Dirichlet tree prior
###################
# Set tree structure
Nodes_in_first_layer = 8
Total_nr_nodes = 64

#set matrix for hyper parameters.
Two_Level_Dirichlet_Tree_Hyperparameters = matrix(NA,nrow = 2,ncol = Total_nr_nodes)

#Dirichlet at top of tree is Dirichlet(2,2,2,2,2,2,2,2)
Two_Level_Dirichlet_Tree_Hyperparameters[1,1:Nodes_in_first_layer] = 2

# At the middle level we have 8 Dirichlet random variables.
# We set all of them to be Dirichlet(2,2,2,2,2,2,2,2) as well.

Two_Level_Dirichlet_Tree_Hyperparameters[2,1:Total_nr_nodes] = 2

# we pass the hyper-paramers to the mcleod.prior.parameters(...) function
mcleod_res = mcleod(x,n,
             a.limits = c(-4,4),
             
             #Define prior
             prior_param = mcleod.prior.parameters(
                       #Define as 2-layer Dirichlet tree
                       prior.type = MCLEOD.PRIOR.TYPE.TWO.LAYER.DIRICHLET,
                       #set tree structure
                       Two.Layer.Dirichlet.Intervals = Total_nr_nodes,
                       Two.Layer.Dirichlet.Nodes.in.First.Layer =  Nodes_in_first_layer,
                       #NOTE: HERE WE PASS THE HYPER-PARAMETERS
                       Prior_Hyper_Parameters_2LDT = Two_Level_Dirichlet_Tree_Hyperparameters),

                       #Set the number of iterations
             computational_parameters = mcleod.computational.parameters(
                       nr.gibbs = 2000,
                       nr.gibbs.burnin = 1000)
)

mcleod::plot.posterior(mcleod_res)
}
