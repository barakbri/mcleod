% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcleod_main_function.R
\name{mcleod.computational.parameters}
\alias{mcleod.computational.parameters}
\title{Returns an object of type 'mcleod.computational.parameters.obj' used to set the computational parameters for the Gibbs sampler, used for estimating the random effect distribution.}
\usage{
mcleod.computational.parameters(
  nr.gibbs = 500,
  nr.gibbs.burnin = 250,
  integration_step_size = 0.01,
  Fast.Gamma.Used = F,
  Fast.Gamma.Bank.Size = 1000L
)
}
\arguments{
\item{nr.gibbs}{Number of gibbs samples used for the MCMC chain}

\item{nr.gibbs.burnin}{Number of gibbs samples taken as burn-in (i.e., samples at the start of the chain that are disregarded when estimating model parameters)}

\item{integration_step_size}{Used for numerical integration when computing the probability for an observed value to originate from a given segment of the underlying density (specifically, from the segments of a.vec, the segments of the piecewise constant density function for the prior)}

\item{Fast.Gamma.Used}{Should a "fast-and-inaccurate" sampling procedure from a gamma density be used. Not recommended and disabled by default.}

\item{Fast.Gamma.Bank.Size}{Size of pregenerated bank of gamma variables: for each rate (0.1,1,10), this number of random deviates is sampled from each rate. Gamma variables are generated by sampling from the pregenerated banks, for any custom rate, by sampling deviates from each "rate-bank" and summing the results up to the required rate.}
}
\value{
An object of size 'mcleod.computational.parameters.obj'
}
\description{
Returns an object of type 'mcleod.computational.parameters.obj' used to set the computational parameters for the Gibbs sampler, used for estimating the random effect distribution.
}
\examples{
 # For full description of package model and workflow,
 # including this function, Type browseVignettes(package = 'mcleod') 
 # in the R console and check the package vignette

library(mcleod)
N = 30
K = 300
set.seed(1)
u = sample(c(0,1),size = K,replace = T)
x = rbinom(K,size = N,prob =inv.log.odds(rnorm(K,-1+3*u,sd = 0.3)))
n = rep(N,K)

# Example how to change the number of MCMC samples, and burn-in length
comp_obj = mcleod.computational.parameters(
  nr.gibbs = 500, #define the number of iter.s
  nr.gibbs.burnin = 250) 

res = mcleod(x, n, computational_parameters = comp_obj) # pass object as argument
}
