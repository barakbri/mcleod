% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CI_mixture_distribution.R
\name{mcleod.estimate.CI}
\alias{mcleod.estimate.CI}
\title{Compute point-wise Confidence Intervals for the quantiles and percentiles of the mixing distribution of binomial samples.}
\usage{
mcleod.estimate.CI(
  X,
  N,
  CI_param = mcleod.CI.estimation.parameters(),
  ratio_holdout = 0.1,
  compute_P_values_over_grid = F,
  compute_CI_curves = T,
  verbose = T,
  Use_Existing_Permutations_From_Object = NULL
)
}
\arguments{
\item{X}{Number of successful draws per observation}

\item{N}{Number of draws per observation}

\item{CI_param}{Result of function \code{\link{mcleod.CI.estimation.parameters}}, setting statistical and computational parameters. If you are unsure about the parameters, best to use the default option.}

\item{ratio_holdout}{When estimating rho adaptively from the data, the ratio of data samples used for the calibration procedure for rho. Values such as 0.1 and 0.2 are plausible.}

\item{compute_P_values_over_grid}{Should the function perform an exhaustive computation of the point-wise CIs, for different quantiles and percentiles of the mixing distribution. This is done by testing all LE/GE type hypotheses, see additional information in the package vignette and paper for the method. Generally, this option is not needed, and the user needs the efficient computation method which only constructs CI at a given confidence levels. This option is useful if a user wishes to construct CI for the mixing distribution at multiple levels simultanously (i.e., using results from a single function call).}

\item{compute_CI_curves}{Should the function perform an efficient computation of the point-wise CIs, for different quantiles and percentiles of the mixing distribution. This option is needed for most cases: get point-wise CIs for the mixing distribution at a given confidence levels, plot the CIs, etc.}

\item{verbose}{Should messages be printed to screen.}

\item{Use_Existing_Permutations_From_Object}{An existing object generated using mcleod.estimate.CI. The cache of CDF samples (used for computing PVs) is instantiated using the CDF samples available in this object. This helps speed up computations considerably. NOTE: It is up to the user to verify the the object uses the same CI parameters and N vec. If the used CDF samples (from WC hypothesis tests) were computed CI.params and N.vec different from the ones in the data, the results might be meaningless!}
}
\value{
A list set as class 'mcleod.CI.obj' with the following entries:
\itemize{
\item{pvalues_grid}{ - available if compute_P_values_over_grid is set to True. Contains a list with entries as detailed below. }
\item{computed_curves}{ - available if compute_CI_curves is set to True. Contains a list with entries as detailed below.}
\item{bank}{ - results of the internal function \code{\link{mcleod.CI.deconv.bank.constructor}}. This object serves as a cache storing estimated CDF of the mixing distribution, from bootstrap data samples used for estimating P.values. See more information in the package vignette. When running the function on similar inputs (having the same value of N.vec and the same CI params) this object can used to speed up PV computations, see description for above parameter \code{Use_Existing_Permutations_From_Object} }
\item{rho_calibration_obj}{ - result of internal function \code{\link{mcleod.CI.rho.calibration.constructor}}. Contains information on how rho was set adaptively for the data.}
\item{n_holdout}{ - When splitting the data, in order to choose rho adaptively, this is the number of samples taken from the full data and used for calibration.}
\item{X_rho}{ - number of successfull draws, for the part of the data used for calibrating rho. A subset of X}
\item{N_rho}{ - number of draws, for the part of the data used for calibrating rho. A subset of N, corresponding to \code{X_rho}}
\item{X_test}{ - number of successfull draws, for the part of the data used for testing. The remainder of X, after excluding \code{X_rho}}
\item{N_test}{ - number of draws, for the part of the data used for testing. The remainder of N, after excluding \code{N_rho}}
\item{res_mcleod_holdout}{ - result of \code{\link{mcleod}} run on the holdout data, used for calibrating rho.}
\item{CDF_holdout}{ - Values of the estimated CDF for mixture distribution in the holdout data (used for calibrating rho). The estimator for the mixing distribution is the pointwise (by theta) median of the posterior distribution. The theta values (X-axis) for the CDF are given by res_mcleod_holdout$parameters_list$a.vec}
\item{res_mcleod_data}{ - result of \code{\link{mcleod}} run on the test data. }
\item{CDF_data}{ - Values of the estimated CDF for mixture distribution in the test data. The estimator for the mixing distribution is the pointwise (by theta) median of the posterior distribution. The theta values (X-axis) for the CDF are given by res_mcleod_data$parameters_list$a.vec}
\item{ind_selected_for_test}{ - When splitting the data (due to using part of the data for calibrating rho), these are the indices (in terms of the input, X and N) of the samples used for testing.}
}

The list given by \code{computed_curves} contains the following entries:
\itemize{
\item{q_star_LE}{ - The upper end of pointwise CDFs for the mixing distribution, by value of theta. Values of theta are given in the vector entry names.}
\item{q_star_GE}{ - The lower end of pointwise CDFs for the mixing distribution, by value of theta. Values of theta are given in the vector entrynames.}
}

The list given by \code{pvalues_grid}
\itemize{
\item{GE.pval.grid}{ - Contains the PVs for GE type hypotheses. Coordinate by q and theta are given by column and row names.}
\item{LE.pval.grid}{ - Contains the PVs for LE type hypotheses. Coordinate by q and theta are given by column and row names.}
}
}
\description{
The assumed model is of the form \eqn{Xi ~ bin(Ni,Pi)}, where \eqn{i} is an index in the range 1,...,n. The function constructs pointwise confidence intervals for the mixing distribution, i.e., the distribution of Pi's, for different quantiles and percentiles. The statistical method is explained in the package vignette.
}
\details{
See package vignette for a full explanation on algorithm and parameters.
}
\examples{
 # For full description of package model and workflow,
 # including this function, Type browseVignettes(package = 'mcleod') 
 # in the R console and check the package vignette
 
 ################################
 ## Example 1- running with default parameters
 ################################
 #Generate data
 
 n = 500
 N = rep(20,n) 
 set.seed(1)
 p = inv.log.odds(rnorm(n,-2,0.5)+3*rbinom(n,1,0.3))
 X = rbinom(n = n,size = N,prob = p)
 
 # Compute point-wise CIs for the mixing distribution
 CI.est.res = mcleod.estimate.CI(X = X, N = N,
         CI_param = mcleod.CI.estimation.parameters(rho.set.value = 0.25))
 
 # Plot the pointwise CIs
 plot.mcleod.CI(mcleod.CI.obj = CI.est.res)
 
 # Retreive CIs for each log-odds value as a data table
 dt_CIs = mcleod.get.CIs.mixing.dist(CI.est.res)
 dt_CIs
 
 ################################
 ## Example 2 - How to change parameters
 ################################
 
   # We construct a CI object holding the different definitions
   
   CI_param = mcleod.CI.estimation.parameters(
   
     # grid of mixing distribution quantiles. 
     # Here we work with 0.1 steps, instead of 0.25
     theta_vec = seq(-4,4,0.1),
     
     # grid of CDF values. Previous grid has 0.05 jumps
     q_vec = seq(0.05,0.95,0.025),
     
     # We change the confidence level to 0.9 (instead of the default 95\% CI)
     alpha.CI = 0.9,
     
     # we consider 0.1,0.2,0.3 as possible values for rho
     rho.possible.values = seq(0.1,0.3,0.1))
   
   # we pass CI_param as an object, and also set the 
   # relative part of samples used for calibrating rho
   # here we pick 10\% of the data. Values in the range 0.1-0.2 are reasonable
   
   CI.est.res = mcleod.estimate.CI(X = X,
                                   N = N,
                                   CI_param = CI_param,
                                   ratio_holdout = 0.1)
 
 ################################
 ## Example 3 - How to compute P-values
 ## for all GE/LE hypotheses
 ################################
 
 #Generate a similar dataset, 200 samples
 n = 200
 N = rep(20,n) 
   set.seed(1)
 p = inv.log.odds(rnorm(n,-2,0.5)+3*rbinom(n,1,0.3))
 X = rbinom(n = n,size = N,prob = p)
 
 # We call mcleod.estimate.CI again, but 
 CI.est.res = mcleod.estimate.CI(X = X, N = N,
 
         # turn this flag to true
         compute_P_values_over_grid = T,
         
         # and this flag to false
         compute_CI_curves = F,
         
         # for this example, we use a fixed value of rho=0.25
         CI_param = mcleod.CI.estimation.parameters(rho.set.value = 0.25),
         
         # this can be used to print progress
         verbose = T)
 
 
 # Grid of P-values for GE hypotheses. Rows are CDF values, cols are quantiles.
 # See rownames and colnames for details.
 
 CI.est.res$pvalues_grid$GE.pval.grid
 
 # Grid of P-values for LE hypotheses. Rows are CDF values, cols are quantiles.
 # See rownames and colnames for details.
 
 CI.est.res$pvalues_grid$LE.pval.grid
}
