% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CI_mixture_distribution.R
\name{mcleod.CI.estimation.parameters}
\alias{mcleod.CI.estimation.parameters}
\title{Constructs container for parameters used when building CIs for the mixing distribution}
\usage{
mcleod.CI.estimation.parameters(
  q_vec = seq(0.05, 0.95, 0.05),
  theta_vec = seq(-3, 3, 0.25),
  a.limits = c(-5, 5),
  sampling_distribution = "binomial",
  comp_parameters = mcleod.computational.parameters(),
  prior_parameters = mcleod.prior.parameters(),
  nr.perms = 200,
  alpha.CI = 0.95,
  rho.calibration.method = "sum",
  rho.set.value = NA,
  rho.possible.values = seq(0.1, 0.5, 0.1),
  rho.estimation.perm = 200,
  rho.q_for_calibration = seq(0.1, 0.9, 0.1),
  rho.theta_for_calibration = NULL,
  rho.alpha.CI = alpha.CI,
  rho.calibration.nr.points.for.pv.exterpolation = 5,
  q_vec_for_computation = NULL,
  theta_vec_for_computation = NULL,
  P_values_grid_compute_univariate_CI = F,
  do_serial = F,
  nr.cores = ceiling(detectCores()/2)
)
}
\arguments{
\item{q_vec}{When estimating CIs/ CI curves of the mixing distribution, this vector sets the possible percentiles over which CIs are built (values in the range (0,1)).}

\item{theta_vec}{When estimating CIs/ CI curves of the mixing distribution, this vector sets the possible quantiles over which CIs are built (values are deviates of the random effect distribution, defined using the same units as \code{a.limits}).}

\item{a.limits}{a vector of size 2, setting the minimum and maximum values of the support of the mixing distribution. For binomial sampling distributions - this sets the support of the log odds of p (the probability for a successfull draw). For poisson errors, this sets the support of log(lambda), with lambda being the Poisson rate.}

\item{sampling_distribution}{either 'binomial' or 'poisson' (lower case), sets the sampling distribution}

\item{comp_parameters}{object generated by mcleod.computational.parameters(), sets computational parameters for the deconvolution algorithm estimating the mixing distribution.}

\item{prior_parameters}{object generated by mcleod.prior.parameters(), sets computational parameters for the deconvolution algorithm estimating the mixing distribution.}

\item{nr.perms}{when performing one sided tests for GE/LE hypotheses, this is the number of permutations performed.}

\item{alpha.CI}{the confidence level of two-sided pointwise confidence intervals (by quantile percentile). The confidence intervals are constructed by inverting one sided tests at significance level (1-alpha.CI)/2}

\item{rho.calibration.method}{one of 'max', 'sum', 'specific': sets how rho is selected via calibration. 'max' chooses the rho with the minimum maximum distance between LE and GE curves for the holdout data; 'sum' chooses 'rho' with the minimum sum of distances between GE and LE curves; 'specific' chooses different rhos for different values of theta (the natural parameter)}

\item{rho.set.value}{default is NA, meaning this value of rho (shift parameter when testing LE/GE hypothesis) is set adaptively from the data. If this is set to a positive value, this value of rho will be used when testing LE/GE hypotheses. Setting this parameter to a value different than NA will disable the calibration selected by the parameter rho.calibration.method}

\item{rho.possible.values}{The possible values of rho considered as candidates when trying to estimate best value of rho for the data}

\item{rho.estimation.perm}{When estimating rho adaptively- sets the number of permutations used to construct the pointwise confidence intervals for the holdout data}

\item{rho.q_for_calibration}{When estimating rho adaptively- CIs for the CDF values will be built at the quantiles matching these values in the holdout data.}

\item{rho.theta_for_calibration}{When estimating rho adaptively- if this parameter is set to a value other than null, the adaptive estimation of rho will be performed using CIs built for this value of theta (random effect value)}

\item{rho.alpha.CI}{The confidence level used to construct pointwise confidence intervals for the holdout data.}

\item{rho.calibration.nr.points.for.pv.exterpolation}{When estimating rho adaptively- for how many point should a P-value be computed, in order to interpolate the PV (at a given theta) across q, and find the edges of the CI (for the given theta)}

\item{q_vec_for_computation}{When running mcleod.estimate.CI() with compute_P_values_over_grid set to true - this will evaluate one sided P-values only for the percentiles defined by q_vec_for_computation, and not for all values defined by q_vec. This is used internally by mcleod.estimate.CI.single.q(), when constructing CIs for the mixing distributions across values of theta (quantile), for a single value of (percentile).}

\item{theta_vec_for_computation}{When running mcleod.estimate.CI() with compute_P_values_over_grid set to true - this will evaluate one sided P-values only for the quantiles defined by theta_vec_for_computation, and not for all values defined by theta_vec. This is used internally by mcleod.estimate.CI.single.theta(), when constructing CIs for the mixing distributions across values of q (percentile), for a single value of theta (quantile).}

\item{P_values_grid_compute_univariate_CI}{An interval parameter, set to T by the functions mcleod.estimate.CI.single.q and mcleod.estimate.CI.single.theta in order to indicate that only a single CI is computed - either by theta or by q.}

\item{do_serial}{When set to T, all computations will be done on a single core}

\item{nr.cores}{When computations are done on multiple cores - set the number of cores. The default value is ceiling(detectCores()/2)}
}
\value{

}
\description{
Constructs an object containing the parameters used in \code{\link{mcleod.estimate.CI}} for estimating point-wise confidence intervals for quantiles and percentiles of the mixing distribution, for binomial/poisson generated samples.
}
\details{
See package vignette for a thorough explanantion on how the mixing distribution is estimated. Also, see package vignette on the meaning of the parameter rho, the procedure for estimating rho, and its parameters.
}
\examples{
 # For full description of package model and workflow,
 # including this function, Type browseVignettes(package = 'mcleod') 
 # in the R console and check the package vignette
 
 ################################
 ## Example - changing CI definitions
 ################################
 #Generate data
 
 n = 500
 N = rep(20,n) 
 set.seed(1)
 p = inv.log.odds(rnorm(n,-2,0.5)+3*rbinom(n,1,0.3))
 X = rbinom(n = n,size = N,prob = p)
 
 
 # We construct a CI object holding the different definitions
   
 CI_param = mcleod.CI.estimation.parameters(
 
   # grid of mixing distribution quantiles. 
   # Here we work with 0.1 steps, instead of 0.25
   theta_vec = seq(-4,4,0.1),
   
   # grid of CDF values. Previous grid has 0.05 jumps
   q_vec = seq(0.05,0.95,0.025),
     
   # We change the confidence level to 0.9 (instead of the default 95\% CI)
   alpha.CI = 0.9,
     
   # we consider 0.1,0.2,0.3 as possible values for rho
   rho.possible.values = seq(0.1,0.3,0.1))
   
 # we pass CI_param as an object, and also set the 
 # relative part of samples used for calibrating rho
 # here we pick 10\% of the data. Values in the range 0.1-0.2 are reasonable
   
 CI.est.res = mcleod.estimate.CI(X = X,
                                 N = N,
                                 CI_param = CI_param,
                                 ratio_holdout = 0.1)
 # Plot the pointwise CIs
 plot.mcleod.CI(mcleod.CI.obj = CI.est.res)
 
 # Retreive CIs for each log-odds value as a data table
 dt_CIs = mcleod.get.CIs.mixing.dist(CI.est.res)
 dt_CIs
 
}
